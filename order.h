#ifndef __ORDER_H
#define __ORDER_H

#include <netinet/in.h>

#define NUM_ORDERS 3
#define HDR_SIZE  8
#define PYLD_SIZE 112
#define BUFF_SIZE 120

struct Order {

	uint8_t  product_len;      // length in bits (4 MSB len, 4 LSB unused)
	uint16_t checksum;
	uint16_t product_id;
	uint16_t invoice_number;
	uint8_t  count;
	char payload[PYLD_SIZE];
};

unsigned char * next_order(unsigned char * buff) {

	static int next = 0;

	if(next == NUM_ORDERS) return NULL;

	unsigned char orders[NUM_ORDERS][BUFF_SIZE] = {
		{
		0xF0,		// product_len
		0x9E, 0xEF, 	// checksum
		0xFF, 0xFF,	// product_id
		0xDD, 0xCC,	// invoice_number
		0x50,		// expected number of products in CSV

		// payload
		0x41, 0x41, 0x41, 0x2C, 0x41, 0x41, 0x41, 0x2C,
		0x41, 0x41, 0x41, 0x2C, 0x41, 0x41, 0x41, 0x2C,
		0x41, 0x41, 0x41, 0x2C, 0x41, 0x41, 0x41, 0x2C,
		0x41, 0x41, 0x41, 0x2C, 0x41, 0x41, 0x41, 0x2C,
		0x41, 0x41, 0x41, 0x2C, 0x41, 0x41, 0x41, 0x2C,
		0x41, 0x41, 0x41, 0x2C, 0x41, 0x41, 0x41, 0x2C,
		0x41, 0x41, 0x41, 0x2C, 0x41, 0x41, 0x41, 0x2C,
		0x41, 0x41, 0x41, 0x2C, 0x41, 0x41, 0x41, 0x2C,
		0x41, 0x41, 0x41, 0x2C, 0x41, 0x41, 0x41, 0x2C,
		0x41, 0x41, 0x41, 0x2C, 0x41, 0x41, 0x41, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		},{
		0xF0,		// product_len
		0x43, 0x0F, 	// checksum
		0xFF, 0xFF,	// product_id
		0xDD, 0xCC,	// invoice_number
		0x12,		// expected number of products in CSV

		// payload
		0x41, 0x41, 0x41, 0x2C, 0x41, 0x41, 0x41, 0x2C,
		0x41, 0x41, 0x41, 0x2C, 0x41, 0x41, 0x41, 0x2C,
		0x41, 0x41, 0x41, 0x2C, 0x41, 0x41, 0x41, 0x2C,
		0x41, 0x41, 0x41, 0x2C, 0x41, 0x41, 0x41, 0x2C,
		0x41, 0x41, 0x41, 0x2C, 0x41, 0x41, 0x41, 0x2C,
		0x41, 0x41, 0x41, 0x2C, 0x41, 0x41, 0x41, 0x2C,
		0x41, 0x41, 0x41, 0x2C, 0x41, 0x41, 0x41, 0x2C,
		0x41, 0x41, 0x41, 0x2C, 0x41, 0x41, 0x41, 0x2C,
		0x41, 0x41, 0x41, 0x2C, 0x41, 0x41, 0x41, 0x2C,
		0x41, 0x41, 0x41, 0x2C, 0x41, 0x41, 0x41, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		},{
                0x70,           // product_len
                0x9E, 0xEF,     // checksum
                0xFF, 0xFF,     // product_id
                0x01, 0xF1,     // invoice_number
                0x0E,           // expected number of products in CSV

                // payload
                0x42, 0x42, 0x42, 0x2C, 0x42, 0x42, 0x42, 0x2C,
                0x42, 0x42, 0x42, 0x2C, 0x42, 0x42, 0x42, 0x2C,
                0x42, 0x42, 0x42, 0x2C, 0x42, 0x42, 0x42, 0x2C,
                0x42, 0x42, 0x42, 0x2C, 0x42, 0x42, 0x42, 0x2C,
                0x42, 0x42, 0x42, 0x2C, 0x42, 0x42, 0x42, 0x2C,
                0x42, 0x42, 0x42, 0x2C, 0x42, 0x42, 0x42, 0x2C,
                0x42, 0x42, 0x42, 0x2C, 0x42, 0x42, 0x42, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                }
	};

	memcpy(buff, orders[next % NUM_ORDERS], BUFF_SIZE);
	next++;

	return buff;
}

#endif
